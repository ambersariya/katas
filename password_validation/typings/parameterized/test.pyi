"""
This type stub file was generated by pyright.
"""

import mock
from unittest import TestCase
from .parameterized import param, parameterized, parameterized_class

def assert_contains(haystack, needle): # -> None:
    ...

runner = ...
UNITTEST = ...
NOSE2 = ...
PYTEST = ...
SKIP_FLAGS = ...
missing_tests = ...
def expect(skip, tests=...): # -> None:
    ...

test_params = ...
@parameterized(test_params)
def test_naked_function(foo, bar=...): # -> None:
    ...

class TestParameterized:
    @parameterized(test_params)
    def test_instance_method(self, foo, bar=...): # -> None:
        ...
    


if notPYTEST:
    class TestSetupTeardown:
        stack = ...
        actual_order = ...
        def setUp(self): # -> None:
            ...
        
        def tearDown(self): # -> None:
            ...
        
        @parameterized([(1, ), (2, )])
        def test_setup(self, count, *a): # -> None:
            ...
        
    
    
def custom_naming_func(custom_tag): # -> (testcase_func: Unknown, param_num: Unknown, param: Unknown) -> Unknown:
    ...

@mock.patch("os.getpid")
class TestParameterizedExpandWithMockPatchForClass(TestCase):
    @parameterized.expand([(42, ), "foo0", param("foo1")])
    @mock.patch("os.umask")
    def test_one_function_patch_decorator(self, foo, mock_umask, mock_getpid): # -> None:
        ...
    
    @parameterized.expand([(42, 51), ("foo0", "bar0"), param("foo1", "bar1")])
    @mock.patch("os.fdopen")
    @mock.patch("os.umask")
    def test_multiple_function_patch_decorator(self, foo, bar, mock_umask, mock_fdopen, mock_getpid): # -> None:
        ...
    


@mock.patch("os.getpid")
class TestParameterizedExpandWithNoExpand:
    @parameterized([(42, 51)])
    @mock.patch("os.umask")
    def test_patch_class_no_expand(self, foo, bar, mock_umask, mock_getpid): # -> None:
        ...
    


class TestParameterizedExpandWithNoMockPatchForClass(TestCase):
    @parameterized.expand([(42, ), "foo0", param("foo1")])
    @mock.patch("os.umask")
    def test_one_function_patch_decorator(self, foo, mock_umask): # -> None:
        ...
    
    @parameterized.expand([(42, 51), ("foo0", "bar0"), param("foo1", "bar1")])
    @mock.patch("os.fdopen")
    @mock.patch("os.umask")
    def test_multiple_function_patch_decorator(self, foo, bar, mock_umask, mock_fdopen): # -> None:
        ...
    


class TestParameterizedExpandWithNoMockPatchForClassNoExpand:
    @parameterized([(42, 51)])
    @mock.patch("os.umask")
    def test_patch_no_expand(self, foo, bar, mock_umask): # -> None:
        ...
    


@parameterized([(42, )])
@mock.patch("os.umask")
def test_mock_patch_standalone_function(foo, mock_umask): # -> None:
    ...

class TestParamerizedOnTestCase(TestCase):
    @parameterized.expand(test_params)
    def test_on_TestCase(self, foo, bar=...): # -> None:
        ...
    
    @parameterized.expand(test_params, name_func=custom_naming_func("custom"))
    def test_on_TestCase2(self, foo, bar=...): # -> None:
        ...
    


class TestParameterizedExpandDocstring(TestCase):
    @parameterized.expand([param("foo")], doc_func=lambda f, n, p: "stuff")
    def test_custom_doc_func(self, foo, bar=...): # -> None:
        """Documentation"""
        ...
    
    @parameterized.expand([param("foo")])
    def test_single_line_docstring(self, foo): # -> None:
        """Documentation."""
        ...
    
    @parameterized.expand([param("foo")])
    def test_empty_docstring(self, foo): # -> None:
        ""
        ...
    
    @parameterized.expand([param("foo")])
    def test_multiline_documentation(self, foo): # -> None:
        """Documentation.

        More"""
        ...
    
    @parameterized.expand([param("foo")])
    def test_unicode_docstring(self, foo): # -> None:
        u"""Döcumentation."""
        ...
    
    @parameterized.expand([param("foo")])
    def test_default_values_get_correct_value(self, foo, bar=...): # -> None:
        """Documentation"""
        ...
    
    @parameterized.expand([param("foo")])
    def test_with_leading_newline(self, foo, bar=...): # -> None:
        """
        Documentation
        """
        ...
    


def test_warns_when_using_parameterized_with_TestCase(): # -> None:
    ...

def test_helpful_error_on_invalid_parameters(): # -> None:
    ...

def test_helpful_error_on_empty_iterable_input(): # -> None:
    ...

def test_skip_test_on_empty_iterable(): # -> None:
    ...

def test_helpful_error_on_empty_iterable_input_expand(): # -> None:
    ...

@parameterized(lambda : iter(["foo"]))
def test_wrapped_iterable_input(foo): # -> None:
    ...

def test_helpful_error_on_non_iterable_input(): # -> None:
    ...

def tearDownModule(): # -> None:
    ...

def test_old_style_classes(): # -> None:
    class OldStyleClass:
        ...
    
    

class TestOldStyleClass:
    @parameterized.expand(["foo", "bar"])
    def test_old_style_classes(self, param): # -> None:
        ...
    


@parameterized([("", param(), []), ("*a, **kw", param(), []), ("*a, **kw", param(1, foo=42), [("*a", (1, )), ("**kw", { "foo": 42 })]), ("foo", param(1), [("foo", 1)]), ("foo, *a", param(1), [("foo", 1)]), ("foo, *a", param(1, 9), [("foo", 1), ("*a", (9, ))]), ("foo, *a, **kw", param(1, bar=9), [("foo", 1), ("**kw", { "bar": 9 })]), ("x=9", param(), [("x", 9)]), ("x=9", param(1), [("x", 1)]), ("x, y=9, *a, **kw", param(1), [("x", 1), ("y", 9)]), ("x, y=9, *a, **kw", param(1, 2), [("x", 1), ("y", 2)]), ("x, y=9, *a, **kw", param(1, 2, 3), [("x", 1), ("y", 2), ("*a", (3, ))]), ("x, y=9, *a, **kw", param(1, y=2), [("x", 1), ("y", 2)]), ("x, y=9, *a, **kw", param(1, z=2), [("x", 1), ("y", 9), ("**kw", { "z": 2 })]), ("x, y=9, *a, **kw", param(1, 2, 3, z=3), [("x", 1), ("y", 2), ("*a", (3, )), ("**kw", { "z": 3 })])])
def test_parameterized_argument_value_pairs(func_params, p, expected): # -> None:
    ...

@parameterized([("abcd", "'abcd'"), ("123456789", "'12...89'"), (123456789, "123...789"), (123456789, "12...89", 4)])
def test_short_repr(input, expected, n=...): # -> None:
    ...

@parameterized([("foo", )])
def test_with_docstring(input): # -> None:
    """ Docstring! """
    ...

cases_over_10 = ...
@parameterized(cases_over_10)
def test_cases_over_10(input, expected): # -> None:
    ...

@parameterized_class(("a", "b", "c"), [("foo", 1, 2), (0, 1, 2)])
class TestParameterizedClass(TestCase):
    def test_method_a(self): # -> None:
        ...
    
    def test_method_b(self): # -> None:
        ...
    
    def testCamelCaseMethodC(self): # -> None:
        ...
    


@parameterized_class(("a", ), [(1, ), (2, )], class_name_func=lambda cls, idx, attrs: "%s_custom_func_%s" % (cls.__name__, attrs["a"]))
class TestNamedParameterizedClass(TestCase):
    def test_method(self): # -> None:
        ...
    


@parameterized_class([{ "foo": 42 }, { "bar": "some stuff" }, { "bar": "other stuff","name": "some name","foo": 12 }])
class TestParameterizedClassDict(TestCase):
    foo = ...
    bar = ...
    def setUp(self): # -> None:
        ...
    
    def tearDown(self): # -> None:
        ...
    
    def test_method(self): # -> None:
        ...
    


class TestUnicodeDocstring:
    @parameterized.expand(['value1', 'vålüé¡'])
    def test_with_docstring(self, param): # -> None:
        """ Это док-стринг, содержащий не-ascii символы """
        ...
    


